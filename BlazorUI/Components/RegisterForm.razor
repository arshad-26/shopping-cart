@inject HttpClient httpClient

<article class="container">
    @if (!String.IsNullOrWhiteSpace(promptMessage))
    {
        <p class="prompt-message @(isSuccess ? "success" : "error")">@promptMessage</p>
    }
    <h2 class="register-heading">Register</h2>
    <p class="password-info">Password should have a minimum of 8 characters and must contain atleast one uppercase, one lowercase and a digit</p>
    <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" class="form-section">
        <DataAnnotationsValidator />
        <section class="input-section">
            <label for="FirstName">First Name</label>
            <InputText @bind-Value="@registerModel.FirstName" id="FirstName" class="text-input" />
            <div class="validation-container">
                <ValidationMessage For="@(() => registerModel.FirstName)" />
            </div>
        </section>
        <section class="input-section">
            <label for="LastName">Last Name</label>
            <InputText @bind-Value="@registerModel.LastName" id="LastName" class="text-input" />
            <div class="validation-container">
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>
        </section>
        <section class="input-section">
            <label for="Email">Email</label>
            <InputText @bind-Value="@registerModel.Email" @bind-Value:after="@EmailExists" id="Email" class="text-input" />
            <div class="validation-container">
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>
        </section>
        <section class="input-section">
            <label for="Password">Password</label>
            <InputText @bind-Value="@registerModel.Password" type="password" id="Password" class="text-input" />
            <div class="validation-container">
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>
        </section>
        <section class="input-section">
            <label for="ConfirmPassword">Confirm Password</label>
            <InputText @bind-Value="@registerModel.ConfirmPassword" type="password" id="ConfirmPassword" class="text-input" />
            <div class="validation-container">
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>
        </section>
        <section class="input-section">
            <p>Role</p>
            <InputRadioGroup id="Role" @bind-Value="@registerModel.Role">
                <div class="radio-section">
                    <div class="user-value">
                        <InputRadio Value="@("User")" id="User" />
                        <label for="User" class="role-label">User</label>
                    </div>
                    <div class="admin-value">
                        <InputRadio Value="@("Admin")" id="Admin" />
                        <label for="Admin" class="role-label">Admin</label>
                    </div>
                </div>
            </InputRadioGroup>
        </section>
        <section class="input-section">
            <input type="submit" value="Register" class="submit-btn" />
        </section>
    </EditForm>
    <a href="/" class="login-btn">Already a user?Login</a>
</article>

@code {
    private RegisterModel registerModel = new () { Role = "User" };
    private EditContext editContext;
    private ValidationMessageStore modelState;
    private string promptMessage = String.Empty;
    private bool isSuccess;

    protected override void OnInitialized()
    {
        editContext = new(registerModel);
        modelState = new ValidationMessageStore(editContext);
    }

    private async Task<bool> EmailExists()
    {
        bool emailExists = false;

        FieldIdentifier emailControlIdentifier = editContext.Field(nameof(registerModel.Email));
        modelState.Clear(emailControlIdentifier);

        if (!String.IsNullOrWhiteSpace(registerModel.Email))
        {
            emailExists = await httpClient.GetFromJsonAsync<bool>($"Identity/EmailExists?email={registerModel.Email}");

            if (emailExists)
            {
                modelState.Add(emailControlIdentifier, "Email already exists");
                editContext.NotifyValidationStateChanged();
            }
        }

        return emailExists;
    }

    private async Task HandleValidSubmit()
    {
        bool emailExists = await EmailExists();

        if (!emailExists)
        {
            HttpResponseMessage response = await httpClient.PostAsJsonAsync("Identity/Register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                promptMessage = "User has been created successfully";
                isSuccess = true;
            }
            else
            {
                promptMessage = "An error occured while creating the user";
                isSuccess = false;
            }
        }
    }
}
