@inject IHttpClientFactory _clientFactory
@inject NavigationManager navigationManager
@inject ISnackbar snackBar

<article>
    <MudCard class="container">
        <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
            <MudCardHeader>
                <MudText Typo="Typo.h5">Register</MudText>
                <MudText Typo="Typo.body2" Class="password-info">Password should have a minimum of 8 characters and must contain atleast one uppercase, one lowercase and a digit</MudText>
            </MudCardHeader>
            <MudCardContent>
                <DataAnnotationsValidator />
                <MudTextField Label="First Name" @bind-Value="registerModel.FirstName" For="(() => registerModel.FirstName)" />
                <MudTextField Label="Last Name" @bind-Value="registerModel.LastName" For="(() => registerModel.LastName)" />
                <MudTextField Label="Email" @bind-Value="registerModel.Email" onchange="@EmailExists()" For="(() => registerModel.Email)" />
                <MudTextField Label="Password" @bind-Value="registerModel.Password" For="(() => registerModel.Password)" InputType="InputType.Password" />
                <MudTextField Label="Confirm Password" @bind-Value="registerModel.ConfirmPassword" For="(() => registerModel.ConfirmPassword)" InputType="InputType.Password" />
                <MudRadioGroup T="string" @bind-value="registerModel.Role" @bind-SelectedOption="registerModel.Role">
                    <MudRadio Option="@("User")">User</MudRadio>
                    <MudRadio Option="@("Admin")">Admin</MudRadio>
                </MudRadioGroup>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                <MudLink Href="/" Underline="Underline.Always">Already a user?Login</MudLink>
            </MudCardActions>
        </EditForm>
    </MudCard>
</article>

@code {
    private RegisterModel registerModel = new() { Role = "User" };
    private EditContext? editContext;
    private ValidationMessageStore? modelState;

    [Parameter]
    public EventCallback LoadingToggled { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(registerModel);
        modelState = new(editContext);
    }

    private async Task<bool> EmailExists()
    {
        bool emailExists = false;

        FieldIdentifier emailControlIdentifier = editContext!.Field(nameof(registerModel.Email));
        modelState!.Clear(emailControlIdentifier);

        if (!String.IsNullOrWhiteSpace(registerModel.Email))
        {
            HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
            emailExists = await httpClient.GetFromJsonAsync<bool>($"Identity/EmailExists?email={registerModel.Email}");

            if (emailExists)
            {
                modelState.Add(emailControlIdentifier, "Email already exists");
                editContext.NotifyValidationStateChanged();
            }
        }

        return emailExists;
    }

    private async Task HandleValidSubmit()
    {
        bool emailExists = await EmailExists();

        if (!emailExists)
        {
            await LoadingToggled.InvokeAsync();

            HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
            HttpResponseMessage response = await httpClient.PostAsJsonAsync("Identity/Register", registerModel);

            await LoadingToggled.InvokeAsync();

            if (response.IsSuccessStatusCode)
            {
                navigationManager.NavigateTo("/");
                snackBar.Add("User has been added successfully", Severity.Success);
            }
            else
            {
                snackBar.Add("An error occured while creating the user", Severity.Error);
            }
        }
    }
}
