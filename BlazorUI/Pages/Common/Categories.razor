@page "/categories"
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]
@inject IHttpClientFactory _clientFactory
@inject AuthInterceptor _authInterceptor
@inject IDialogService _dialog
@inject ComponentBus _bus

<article>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<CategoryModel>>>(ServerReload))" FixedHeader="true" Hover="true" Dense="true" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Manage Categories</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Medium" OnClick="@((e) => OpenAddDialog())" />
        </ToolBarContent>
        <ColGroup>
            <col style="width:80%" />
            <col style="width:20%" />
        </ColGroup>
        <HeaderContent>
            <MudTh Class="table-heading">
                <MudTableSortLabel SortLabel="category_field" T="CategoryModel">Category</MudTableSortLabel>
            </MudTh>
            <MudTh Class="table-heading">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="() => OpenDeleteDialog(context.CategoryID)"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No Records Found</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</article>

@code {
    private IEnumerable<CategoryModel> pagedData;
    private string searchString = "";
    private int totalItems;
    private MudTable<CategoryModel> table;

    protected override void OnInitialized()
    {
        _authInterceptor.RegisterEvent();

        _bus.Subscribe<CategoryAddedEvent>(CategoryAddedHandler);
        _bus.Subscribe<CategoryDeletedEvent>(CategoryDeletedHandler);
    }

    private async Task<TableData<CategoryModel>> ServerReload(TableState state)
    {
        HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
        IEnumerable<CategoryModel>? data = await httpClient.GetFromJsonAsync<List<CategoryModel>>("Item/GetCategories");

        data = data!.Where(element =>
        {
            if (String.IsNullOrWhiteSpace(searchString))
                return true;

            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();

        totalItems = data.Count();

        if (state.SortLabel == "category_field")
        {
            data = data.OrderByDirection(state.SortDirection, x => x.Name);
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<CategoryModel>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void CategoryAddedHandler(MessageArgs args)
    {
        CategoryAddedEvent categoryAddedEvent = args.GetMessage<CategoryAddedEvent>();

        if(categoryAddedEvent.ReloadTable)
            table.ReloadServerData();
    }

    private void CategoryDeletedHandler(MessageArgs args)
    {
        CategoryDeletedEvent categoryDeletedEvent = args.GetMessage<CategoryDeletedEvent>();

        if(categoryDeletedEvent.ReloadTable)
            table.ReloadServerData();
    }

    private void OpenAddDialog() => _dialog.Show<Category>("Add Category");

    private void OpenDeleteDialog(int categoryID)
    {
        DialogParameters parameters = new();

        parameters.Add("ContentText", "Are you sure you want to delete this record?");
        parameters.Add("CategoryID", categoryID);

        DialogOptions options = new() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.Center };

        _dialog.Show<DeleteDialog>("Delete", parameters, options);
    }

    public void Dispose()
    {
        _authInterceptor.DisposeEvent();
        _bus.UnSubscribe<CategoryAddedEvent>(CategoryAddedHandler);
        _bus.UnSubscribe<CategoryDeletedEvent>(CategoryDeletedHandler);
    }
}
