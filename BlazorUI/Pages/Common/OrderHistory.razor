@page "/orderhistory"
@attribute [Authorize]
@inject AuthInterceptor _authInterceptor
@inject IHttpClientFactory _clientFactory
@inject IJSRuntime _jsRuntime
@inject ISessionStorageService _sessionStorage
@inject NavigationManager _navManager
@inject ComponentBus _bus
@inject IDialogService _dialog
@implements IDisposable

<section class="order-container">
    @if(userOrderDetails is null || userOrderDetails.Count == 0)
    {
        <MudCard>
            <MudCardContent>
                <MudText Class="no-content-text">No Orders Found</MudText>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        @foreach (OrderDetails orderDetail in userOrderDetails)
        {
            List<OrderItemDetails> orderItems = orderDetail.Items.ToList();
            StringBuilder sb = new();

            for (int i = 0; i < orderItems.Count; i++)
            {
                sb.Append(orderItems[i].Name);

                if (orderItems[i].Quantity > 1)
                    sb.Append($"({orderItems[i].Quantity})");

                if (i != orderItems.Count - 1)
                    sb.Append("+");
            }

            DateTime localDateTime = TimeZoneInfo.ConvertTimeFromUtc(orderDetail.OrderDate, localTimezoneInfo);

            <MudCard>
                <MudCardContent>
                    <MudText>@sb.ToString()</MudText>
                    <MudText Class="price-info">@orderDetail.TotalPrice</MudText>
                    <MudText Class="order-date-info">@localDateTime.ToString("dd/MM/yyyy hh:mm tt")</MudText>
                    <MudElement HtmlTag="hr" Class="line-seperator"></MudElement>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Outlined" OnClick="async () => await Reorder(orderDetail.OrderID)">REORDER</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary">RATE ORDER</MudButton>
                </MudCardActions>
            </MudCard>
        }
    }
    
</section>

@code {
    #nullable disable
    private List<OrderDetails> userOrderDetails;

    private TimeZoneInfo localTimezoneInfo;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    #nullable restore

    protected override async Task OnInitializedAsync()
    {
        _authInterceptor.RegisterEvent();

        AuthenticationState authState = await AuthState;
        string email = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value;

        HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
        ServiceResponse<IEnumerable<OrderDetails>> response = (await httpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<OrderDetails>>>($"Order/GetUserOrders?email={email}"))!;
        userOrderDetails = response.ResponseData!.ToList();

        string localTimezone = await _jsRuntime.InvokeAsync<string>("GetUserTimeZone");
        localTimezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(localTimezone);
    }

    private async Task Reorder(long orderId)
    {
        string cartJson = await _sessionStorage.GetItemAsync<string>("Cart");

        List<CartModel> orderItems = new();
        OrderDetails orderDetail = userOrderDetails.FirstOrDefault(x => x.OrderID == orderId)!;
        List<OrderItemDetails> orderItemDetails = orderDetail.Items.ToList();

        foreach (OrderItemDetails orderItem in orderItemDetails)
        {
            CartModel cartItem = new()
                {
                    ItemID = orderItem.ID,
                    ItemName = orderItem.Name,
                    Quantity = orderItem.Quantity,
                    Price = orderItem.Price
                };

            orderItems.Add(cartItem);
        }

        if (String.IsNullOrEmpty(cartJson))
        {
            string jsonString = JsonSerializer.Serialize<List<CartModel>>(orderItems);
            await _sessionStorage.SetItemAsync("Cart", jsonString);

            CartCountUpdateEvent cartCountUpdateEvent = new() { CartCount = orderItems.Count };
            await _bus.Publish(cartCountUpdateEvent);

            _navManager.NavigateTo("/orders");
        }
        else
        {
            DialogParameters parameters = new();
            parameters.Add("ContentText", "Cart already contains items. Do you want to replace it?");
            parameters.Add("CartItems", orderItems);

            DialogOptions options = new() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.Center };
            _dialog.Show<ReplaceOrderDialog>("Replace Order", parameters, options);
        }
    }

    public void Dispose()
    {
        _authInterceptor.DisposeEvent();
    }
}
