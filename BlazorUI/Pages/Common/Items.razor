@page "/items"
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]
@inject IDialogService _dialog
@inject AuthInterceptor _authInterceptor
@inject IHttpClientFactory _clientFactory
@inject ComponentBus _bus

<article>
    <MudTable ServerData="@(new Func<TableState, Task<TableData<ItemModel>>>(ServerReload))" FixedHeader="true" Hover="true" Dense="true" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Manage Items</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Medium" OnClick="@OpenAddDialog" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="table-heading">
                <MudTableSortLabel SortLabel="name_field" T="ItemModel">Name</MudTableSortLabel>
            </MudTh>
            <MudTh Class="table-heading">
                <MudTableSortLabel SortLabel="price_field" T="ItemModel">Price</MudTableSortLabel>
            </MudTh>
            <MudTh Class="table-heading">
                <MudTableSortLabel SortLabel="category_field" T="ItemModel">Category</MudTableSortLabel>
            </MudTh>
            <MudTh Class="table-heading">Image</MudTh>
            <MudTh Class="table-heading">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Price</MudTd>
            <MudTd>@context.Category</MudTd>
            <MudTd>
                <img src="@($"data:image/jpeg;base64,{@context.Base64Img}")" />
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small" OnClick="() => OpenEditDialog(context.ID)"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="() => OpenDeleteDialog(context.ID)"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No Records Found</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</article>

@code {
    private IEnumerable<ItemModel> pagedData;
    private string searchString = "";
    private int totalItems;
    private MudTable<ItemModel> table;
    private IEnumerable<CategoryModel> categories;

    protected override async Task OnInitializedAsync()
    {
        _authInterceptor.RegisterEvent();

        _bus.Subscribe<ItemAddedEvent>(ItemAddedHandler);
        _bus.Subscribe<ItemDeletedEvent>(ItemDeletedHandler);
        _bus.Subscribe<ItemEditEvent>(ItemEditHandler);

        HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
        ServiceResponse<IEnumerable<CategoryModel>> response = (await httpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<CategoryModel>>>("Item/GetCategories"))!;
        categories = response.ResponseData!;
    }

    private async Task<TableData<ItemModel>> ServerReload(TableState state)
    {
        HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
        ServiceResponse<IEnumerable<ItemModel>> response = (await httpClient.GetFromJsonAsync<ServiceResponse<IEnumerable<ItemModel>>>("Item/GetItems"))!;
        IEnumerable<ItemModel> data = response.ResponseData!;

        data = data!.Where(element =>
        {
            if (String.IsNullOrWhiteSpace(searchString))
                return true;

            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (element.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if (element.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            if ($"{element.Name} {element.Price} {element.Category}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();

        totalItems = data.Count();

        data = state.SortLabel switch
        {
            "name_field" => data.OrderByDirection(state.SortDirection, x => x.Name),
            "price_field" => data.OrderByDirection(state.SortDirection, x => x.Price),
            "category_field" => data.OrderByDirection(state.SortDirection, x => x.Category),
            _ => data
        };

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ItemModel>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void ItemAddedHandler(MessageArgs args)
    {
        ItemAddedEvent itemAddedEvent = args.GetMessage<ItemAddedEvent>();

        if (itemAddedEvent.ReloadTable)
            table.ReloadServerData();
    }

    private void ItemEditHandler(MessageArgs args)
    {
        ItemEditEvent itemEditEvent = args.GetMessage<ItemEditEvent>();

        if (itemEditEvent.ReloadTable)
            table.ReloadServerData();
    }

    private void ItemDeletedHandler(MessageArgs args)
    {
        ItemDeletedEvent itemDeletedEvent = args.GetMessage<ItemDeletedEvent>();

        if (itemDeletedEvent.ReloadTable)
            table.ReloadServerData();
    }

    private void OpenAddDialog() {
        DialogParameters parameters = new();
        parameters.Add("Categories", categories);

        _dialog.Show<Item>("Add Item", parameters);
    }

    private async Task OpenEditDialog(long ID)
    {
        DialogParameters parameters = new();

        HttpClient httpClient = _clientFactory.CreateClient("ServerAPI");
        ServiceResponse<ItemModel> response = (await httpClient.GetFromJsonAsync<ServiceResponse<ItemModel>>($"Item/EditItem?ID={ID}"))!;
        ItemModel selectedItem = response.ResponseData!;

        parameters.Add("Categories", categories);
        parameters.Add("EditItemModel", selectedItem);
        parameters.Add("IsEdit", true);

        _dialog.Show<Item>("Edit Item", parameters);
    }

    private void OpenDeleteDialog(long ID)
    {
        DialogParameters parameters = new();

        parameters.Add("ContentText", "Are you sure you want to delete this record?");
        parameters.Add("ItemID", ID);
        
        DialogOptions options = new() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.Center };

        _dialog.Show<DeleteItemDialog>("Delete", parameters, options);
    }

    public void Dispose()
    {
        _authInterceptor.DisposeEvent();

        _bus.UnSubscribe<ItemAddedEvent>(ItemAddedHandler);
        _bus.UnSubscribe<ItemDeletedEvent>(ItemDeletedHandler);
        _bus.UnSubscribe<ItemEditEvent>(ItemEditHandler);
    }
}
